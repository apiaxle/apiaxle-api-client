// Generated by CoffeeScript 1.3.3
(function() {
  var Axle, http, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  http = require("http");

  _ = require("underscore");

  Axle = (function() {

    function Axle() {}

    Axle.prototype.getter = function(path, callback) {
      var headers, options, req;
      if (this.domain == null) {
        throw new Error("No domain set.");
      }
      headers = {
        "Host": this.domain,
        "User-Agent": "axle-node HTTP client",
        "Content-Length": "0"
      };
      options = {
        hostname: this.domain,
        port: this.port,
        path: this.path(path),
        headers: headers
      };
      req = http.request(options, function(res) {
        var body;
        res.setEncoding("utf8");
        body = [];
        res.on("data", function(chunk) {
          return body.push(chunk);
        });
        return res.on("end", function() {
          var body_str, error_details;
          body_str = body.join("");
          if (res.statusCode === !200) {
            error_details = {
              status: res.statusCode,
              body: body_str
            };
            callback(error_details, null);
          }
          return callback(null, JSON.parse(body_str));
        });
      });
      return req.end();
    };

    return Axle;

  })();

  exports.V1 = (function(_super) {

    __extends(V1, _super);

    function V1(domain, port) {
      this.domain = domain;
      this.port = port != null ? port : 3000;
      this.path_prefix = "/v1";
    }

    V1.prototype.path = function(extra) {
      return this.path_prefix + extra;
    };

    V1.prototype.getKeysByApi = function(api, options, cb) {
      var defaults, endpoint, params;
      defaults = {
        start: 0,
        limit: 10
      };
      params = _.extend(defaults, options);
      endpoint = "/api/" + api + "/keys/" + params.start + "/" + params.limit;
      return this.getter(endpoint, cb);
    };

    V1.prototype.getApis = function(options, cb) {
      var defaults, endpoint, params;
      defaults = {
        start: 0,
        limit: 10,
        resolve: false
      };
      params = _.extend(defaults, options);
      endpoint = "/api/list/" + params.start + "/" + params.limit + "?resolve=" + params.resolve;
      return this.getter(endpoint, cb);
    };

    return V1;

  })(Axle);

}).call(this);
